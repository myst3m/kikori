## This file is an interim config file to boot instead of clj script
## The schema could be changed as of 28. Sep 2018

## How to use this.
## Ex.
## $ kikori -cp kikori.jar server system.conf

log: 
 level: info
 output: /var/log/kikori/kikori.log

module: bme280, d6t44l, adxl345, d7s, gps, irmagician, 2jcie, tick

## For Java module
#java-module: kikori.D6t44lJava

platform:
##  On Linux, LCD can use via FrameBuffer. Remove :path if you don't have
##  physical LCD0

# interface:

## LCD
#   config: FB {path "/dev/fb1", width 128, height 128}
#   place: FB {name "LCD0"}

## TICK
#   place: USER {name "TICK0", interval 100, module "Tick"}

## CAMERA
#   config: CAMERA {index 0, store "/tmp"}
#   place: CAMERA {name "CAM0"}

## Omron 2JCIE
#   config: UART {path "/dev/ttyUSB0", baud-rate 115200}
#   place: UART {name "BU2JCIE0", module "BU.2JCIE", :id "34:F6:4B:66:47:E7"}
#   place: UART {name "BU2JCIE1", module "BU.2JCIE", :id "34:F6:4B:66:47:E8"}

## For Linux, Raspberry Pi
  device: hidraw
    # System
    config: system {PCB "1.0.0", power "5.0"}
    # On Chip
    config: ADC {vrm "VDD"}
    config: DAC {vrm "VDD"}    
    bind: GP0 GPIO
    bind: GP1 GPIO
    bind: GP2 ADC2
    bind: GP3 DAC2

    place: GP0 {name "GP0"}
    place: GP1 {name "ADC1"}    
    place: GP2 {name "ADC2"}
    place: GP3 {name "DAC2"}
    
    ## I2C
    config: I2C
    place: I2C {addr 0x0a, prefix "D6T44L", module "D6T44L"}            
    place: I2C {addr 0x53, prefix "ADXL", module "ADXL345"}
    place: I2C {addr 0x76, prefix "BME", module "BME280"}
    place: I2C {addr 0x77, prefix "BME", module "BME280"}
    # If it is required to use java module, use as below
    # place: I2C {addr 0x0a, name "D6T44L0", module "kikori.D6t44lJava"}    

    # UART
    config: UART {path "auto"}    
    place: UART {prefix "GPS" module "GPS"}
    


### ## Mac OS X 
### ### USB_04d8_00dd_
 device: {os "macosx", id "any"}
    # System
    config: system {PCB "1.0.0", power "5.0"}
    # On Chip
    config: ADC {vrm "VDD"}
    config: DAC {vrm "VDD"}    
    bind: GP0 GPIO
    bind: GP1 GPIO
    bind: GP2 ADC2
    bind: GP3 DAC2

    place: GP0 {name "GP0"}
    place: GP1 {name "ADC1"}    
    place: GP2 {name "ADC2"}
    place: GP3 {name "DAC2"}
    
    # I2C
    place: I2C {addr 0x0a, name "D6T44L0", module "D6T44L"}        
    place: I2C {addr 0x53, name "ADXL0", module "ADXL345"}
    place: I2C {addr 0x76, name "BME0", module "BME280"}
    place: I2C {addr 0x77, name "BME1", module "BME280"}    
    place: UART {name "GPS0" module "GPS"}
    place: GP0 {name "GP0"}    
    place: GP2 {name "ADC2"}

    # For later versions of  MacOS Ver10.14
    #  config: UART {path "/dev/tty.usbmodem14021"} 
    # Others
    #  config: UART {path "/dev/tty.usbmodem1421"}  
    #
    

## Windows
### USB\\VID_04D8&PID_00DD
 device: {os "windows", id "any"}
    # System
    config: system {PCB "1.0.0", power "5.0"} 
    # On Chip
    config: ADC {vrm "VDD"}
    config: DAC {vrm "VDD"}    
    bind: GP0 GPIO
    bind: GP1 GPIO
    bind: GP2 ADC2
    bind: GP3 DAC2

    place: GP0 {name "GP0"}
    place: GP1 {name "ADC1"}    
    place: GP2 {name "ADC2"}
    place: GP3 {name "DAC2"}
    
    # I2C
    place: I2C {addr 0x0a, name "D6T44L0", module "D6T44L"}        
    place: I2C {addr 0x53, name "ADXL0", module "ADXL345"}
    place: I2C {addr 0x76, name "BME0", module "BME280"}
    place: I2C {addr 0x77, name "BME1", module "BME280"}    
    place: UART {name "GPS0" module "GPS"}
    place: GP0 {name "GP0"}    
    place: GP2 {name "ADC2"}

   ##  For use of UART not under Groovy-IoT
   ##  interface:
   ##    config: UART {path "/dev/ttyACM0" baud-rate 9600}
   ##    place: UART {name "IR0" module "IrMagician" data-path "/tmp/json"}


webserver:
    ip: 0.0.0.0
    port: 3000

# Comment in for storing data in influxdb
#influxdb:
#    ip: localhost
#    port: 8086
#    interval: 5000
#    secrets: /etc/kikori/secrets   
#    source: ["BME0" "ADC2"]
#    tags: {loc "Tokyo"}
#
#nrepl:
#    ip: localhost
#    port: 7888
#    cider: false

confirm: false

console: false
